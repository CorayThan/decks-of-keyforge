buildscript {
    ext {
        kotlinVersion = '1.5.0'
        springBootVersion = '2.4.5'
        queryDslVersion = "4.4.0"
        shedlockVersion = "4.23.0"
        jjwtVersion = "0.11.2"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.0'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.5.0'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.5.0'
    id 'org.jetbrains.kotlin.kapt' version '1.5.0'

    id "org.springframework.boot"  version "2.4.5"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

group = 'coraythan'
version = '461'
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }

    bootJar {
        from('.ebextensions') {
            into('.ebextensions')
        }
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

springBoot {
    mainClass = "coraythan.keyswap.KeyswapApplicationKt"
}

task genTs(type: JavaExec) {
    main = "coraythan.keyswap.generatets.TsGenerator"
    classpath = sourceSets.main.runtimeClasspath
}

task genSrc {
    dependsOn genTs
    doLast {
        new File("$projectDir/src/main/resources", "application-generated.yml").text = "api-version: $version"
        new File("$projectDir/ui/src/config", "ClientVersion.ts").text = "export const clientVersion = $version"
    }
}

dependencies {

    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation("org.springframework.boot:spring-boot-starter-mail")

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0-RC')
    implementation('org.jetbrains.kotlinx:kotlinx-html-jvm:0.7.3')

    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml')
    implementation('org.flywaydb:flyway-core')
    implementation("net.javacrumbs.shedlock:shedlock-spring:$shedlockVersion")
    implementation("net.javacrumbs.shedlock:shedlock-provider-jdbc-template:$shedlockVersion")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("org.logback-extensions:logback-ext-loggly:0.1.5")
    implementation("com.patreon:patreon:0.4.2")
    implementation("com.amazonaws:aws-java-sdk-s3:1.11.1014")
    implementation("io.jsonwebtoken:jjwt-api:$jjwtVersion")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:$jjwtVersion")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:$jjwtVersion")

    implementation("com.vladmihalcea:hibernate-types-52:2.10.4")
    implementation("com.querydsl:querydsl-core:$queryDslVersion")
    implementation("com.querydsl:querydsl-jpa:$queryDslVersion")
    kapt("com.querydsl:querydsl-apt:$queryDslVersion:jpa")

    runtimeOnly('org.postgresql:postgresql')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')

    testImplementation("org.junit.vintage:junit-vintage-engine") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
}
